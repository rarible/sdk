"use strict";(self.webpackChunkexample=self.webpackChunkexample||[]).push([[61068],{44110:(t,n,c)=>{c.d(n,{r:()=>a,u:()=>e});const e=(0,c(74027).xH)({id:1,name:"Ethereum",nativeCurrency:{name:"Ether",symbol:"ETH",decimals:18},blockExplorers:[{name:"Etherscan",url:"https://etherscan.io"}]}),a=e},61068:(t,n,c)=>{c.d(n,{autoConnectInAppWallet:()=>i,connectInAppWallet:()=>a});var e=c(44110);async function a(t,n){const{authenticate:a}=await Promise.resolve().then(c.bind(c,27473)),i=(await a(t)).user.account;return n?.smartAccount?o({client:t.client,authAccount:i,smartAccountOptions:n.smartAccount,chain:t.chain}):[i,t.chain||n?.smartAccount?.chain||e.u]}async function i(t,n){const{getAuthenticatedUser:a}=await Promise.resolve().then(c.bind(c,27473)),i=await a({client:t.client});if(!i)throw new Error("not authenticated");const r=i.account;return n?.smartAccount?o({client:t.client,authAccount:r,smartAccountOptions:n.smartAccount,chain:t.chain}):[r,t.chain||n?.smartAccount?.chain||e.u]}async function o(t){const[{smartWallet:n},{connectSmartWallet:e}]=await Promise.all([Promise.resolve().then(c.bind(c,340)),Promise.all([c.e(18333),c.e(12433),c.e(42443)]).then(c.bind(c,42443))]);return e(n(t.smartAccountOptions),{client:t.client,personalAccount:t.authAccount,chain:t.chain},t.smartAccountOptions)}}}]);